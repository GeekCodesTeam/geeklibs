def config = rootProject.ext //配置
def librarys = config.dependencies //
apply plugin: 'com.android.application'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        jumboMode = true
    }
    packagingOptions {
        pickFirst 'lib/armeabi/libRSSupport.so'
        pickFirst 'lib/armeabi/librsjni_androidx.so'
        pickFirst 'lib/armeabi/librsjni.so'
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni_androidx.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/librsjni_androidx.so'
        pickFirst 'lib/x86_64/libRSSupport.so'
        pickFirst 'lib/x86_64/librsjni_androidx.so'
        pickFirst 'lib/x86_64/librsjni.so'
        pickFirst 'lib/x86/librsjni_androidx.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/x86/librsjni.so'

    }
    compileSdkVersion config.compileSdkVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.appversionCode
        versionName config.appversionName
        multiDexEnabled true
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
        vectorDrawables.useSupportLibrary = true
//        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
        // Cmake
//        externalNativeBuild {
//            cmake {
//                version "3.18.1"
//                // 指定一些编译选项
//                cppFlags "-std=c++11 -frtti -fexceptions"
//                // 也可以使用下面这种语法向变量传递参数：
//                // arguments "-D变量名=参数".
//                arguments "-DANDROID_ARM_NEON=TRUE",
//                        // 使用下面这种语法向变量传递多个参数（参数之间使用空格隔开）：
//                        // arguments "-D变量名=参数1 参数2"
//                        "-DANDROID_CPP_FEATURES=rtti exceptions"
//                // 指定ABI
//                abiFilters /*"armeabi-v7a" ,*/ "arm64-v8a"
//            }
//        }

        ndk {
            abiFilters /*'armeabi', */ /*'armeabi-v7a',*/ 'arm64-v8a'
//            abiFilters 'armeabi-v7a'
        }
    }
    sourceSets.main {
        // MIM or Not MIM
        manifest.srcFile 'src/main/mi/AndroidManifest.xml'
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    // CMakeLists.txt
//    externalNativeBuild {
//        cmake {
////            path "CMakeLists.txt"  //
//            path "src/main/cpp/CMakeLists.txt"
//            version "3.18.1"
//        }
//    }
    flavorDimensions "keep"
    productFlavors {
        bxnt_nation { dimension "keep" }
        bxny_nation { dimension "keep" }
        bxn_nation { dimension "keep" }
    }

    // MIM or Not MIM
    signingConfigs {
        release {
            storeFile file('./../../releasekey/harmonyandroid.jks')
            keyAlias 'harmonyandroid'
            keyPassword 'HarmonyAndroid'
            storePassword 'HarmonyAndroid'
        }
        debug {
            storeFile file('./../../releasekey/harmonyandroid.jks')
            keyAlias 'harmonyandroid'
            keyPassword 'HarmonyAndroid'
            storePassword 'HarmonyAndroid'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

}

// TODO Wallet打包
//apply from: './multiple-channel.gradle'